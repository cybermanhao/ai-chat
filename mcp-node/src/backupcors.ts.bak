// 备份文件，无需参与编译
async function main() {
  const app = express();
  app.use(express.json());
  app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", req.headers.origin || "*");
    res.header("Access-Control-Allow-Methods", "GET,POST,OPTIONS");
    res.header("Access-Control-Allow-Headers", "Content-Type, Authorization, mcp-protocol-version, mcp-session-id, Accept, Origin");
    res.header("Access-Control-Expose-Headers", "mcp-protocol-version, mcp-session-id");
    res.header("Access-Control-Allow-Credentials", "true");
    if (req.method === "OPTIONS") {
      res.sendStatus(200);
    } else {
      next();
    }
  });
  const MCP_PATH = "/mcp-weather";
  const PORT = process.env.PORT ? Number(process.env.PORT) : 8010;
  const HOST = process.env.HOST || "127.0.0.1";

  // Correct usage: do not pass { path } to StreamableHTTPServerTransport, mount handler at path in Express
  const transport = new StreamableHTTPServerTransport({
    sessionIdGenerator: () => randomUUID(),
  });
  await server.connect(transport);

  // 挂载 MCP transport 的 handler 到 Express
  app.post(MCP_PATH, async (req: Request, res: Response) => {
    await transport.handleRequest(req, res, req.body);
  });
  app.get(MCP_PATH, async (req: Request, res: Response) => {
    await transport.handleRequest(req, res);
  });

  app.listen(PORT, HOST, () => {
    console.log(`Weather MCP Server running on http://${HOST}:${PORT}${MCP_PATH}`);
  });
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
